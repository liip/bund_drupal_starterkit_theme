<?php

use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Utility\Xss;
use Drupal\Component\Utility\Tags;
use Drupal\Component\Utility\Html;
use Drupal\Core\Template\Attribute;

/**
 * Preprocess variables for html templates.
 */
function bund_drupal_starterkit_theme_preprocess_html(&$variables) {

  $variables['attributes']['class'][] = Html::getClass('boxed');

}

/**
 * Preprocess variables for page templates.
 */
function bund_drupal_starterkit_theme_preprocess_page(&$variables) {

  $variables['site_mail'] = Drupal::config('system.site')->get('mail');

}

function bund_drupal_starterkit_theme_preprocess_image(&$vars)
{
  $vars['attributes']['class'][] = 'img-responsive';
  // http://getbootstrap.com/css/#overview-responsive-images
}

function bund_drupal_starterkit_theme_preprocess_image_style(&$vars)
{
  $vars['attributes']['class'][] = 'img-responsive';
  // http://getbootstrap.com/css/#overview-responsive-images
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block templates.
 */
function bund_drupal_starterkit_theme_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Search a block with a valid language suffix
  $all_languages = \Drupal::languageManager()->getLanguages();
  $all_lang_pattern = join('|', array_keys($all_languages));
  if (preg_match('/^(.+)(' . $all_lang_pattern . ')(?:(_\d+))?$/', $variables['elements']['#id'], $matches)) {

    // Suggestions tpl to have one template for blocks with any language suffix
    $new_suggestion = 'block__' . $matches[1];

    // Add iteration number if the block is duplicated
    if (!empty($matches[3])) {
      $new_suggestion .= $matches[3];
    }

    // Move new template suggestion upper
    array_splice($suggestions, 3, 0, $new_suggestion);
  }
}

function bund_drupal_starterkit_theme_preprocess_links__language_block(&$variables) {

  // define current language and use it within twig.
  $current_language = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();

  $variables['current_language'] = $current_language;
  unset($current_language);
}

function bund_drupal_starterkit_theme_preprocess_menu__main_navigation(&$variables) {
  $variables['site_name'] = \Drupal::config('system.site')->get('name');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for block templates.
 */
function bund_drupal_starterkit_theme_theme_suggestions_menu_alter(array &$suggestions, array $variables) {
  // Search a menu with a valid language suffix
  $all_languages = \Drupal::languageManager()->getLanguages();
  $all_lang_pattern = join('|', array_keys($all_languages));
  if (preg_match('/^.+(-(' . $all_lang_pattern . '))$/', $variables['menu_name'], $matches)) {
    // Suggestions tpl to have one template for blocks with any language suffix
    $name_without_lang = str_replace($matches[1], '', $variables['menu_name']);
    $name_without_lang = strtr($name_without_lang, '-', '_');
    // Move new template suggestion upper
    array_unshift($suggestions, 'menu__' . $name_without_lang);
  }

}

/**
 * Implements hook_preprocess_menu().
 */
function bund_drupal_starterkit_theme_preprocess_menu(&$variables) {
  $main_menus = [
    'main-navigation-de',
    'main-navigation-fr',
    'main-navigation-it',
    'main-navigation-rm',
    'main-navigation-en'
  ];

  if (in_array($variables['menu_name'], $main_menus)) {
    $variables['mobile_items'] = $variables['items'];
  }
}

/**
 * Preprocess variables for field templates.
 */
/* -- Delete this line if you want to use this function
function apodro_preprocess_field(&$variables) {
}
// */

/**
 * Preprocess variables for node templates.
 */
/* -- Delete this line if you want to use this function
function apodro_preprocess_node(&$variables) {
}
// */

/**
 * Preprocess variables for comment templates.
 */
/* -- Delete this line if you want to use this function
function apodro_preprocess_comment(&$variables) {
}
// */

/**
 * Preprocess variables for block templates.
 */
/* -- Delete this line if you want to use this function
function apodro_prepÂ§rocess_block(&$variables) {
}
// */
